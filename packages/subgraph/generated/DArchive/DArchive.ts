// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ArchiveAdded extends ethereum.Event {
  get params(): ArchiveAdded__Params {
    return new ArchiveAdded__Params(this);
  }
}

export class ArchiveAdded__Params {
  _event: ArchiveAdded;

  constructor(event: ArchiveAdded) {
    this._event = event;
  }

  get contentID(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class DArchive extends ethereum.SmartContract {
  static bind(address: Address): DArchive {
    return new DArchive("DArchive", address);
  }

  archiveAdded(param0: string): boolean {
    let result = super.call("archiveAdded", "archiveAdded(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBoolean();
  }

  try_archiveAdded(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("archiveAdded", "archiveAdded(string):(bool)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddArchiveCall extends ethereum.Call {
  get inputs(): AddArchiveCall__Inputs {
    return new AddArchiveCall__Inputs(this);
  }

  get outputs(): AddArchiveCall__Outputs {
    return new AddArchiveCall__Outputs(this);
  }
}

export class AddArchiveCall__Inputs {
  _call: AddArchiveCall;

  constructor(call: AddArchiveCall) {
    this._call = call;
  }

  get contentID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddArchiveCall__Outputs {
  _call: AddArchiveCall;

  constructor(call: AddArchiveCall) {
    this._call = call;
  }
}
