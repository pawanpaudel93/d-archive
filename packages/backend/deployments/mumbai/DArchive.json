{
  "address": "0x0370E44b6B3b4B22BC5deC4053FCb82aD1591BE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentID",
          "type": "string"
        }
      ],
      "name": "AlreadyArchived",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentID",
          "type": "string"
        }
      ],
      "name": "ArchiveAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentID",
          "type": "string"
        }
      ],
      "name": "addArchive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "archiveAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe95f85efed00c3ce4039926ab0288f6efd79fa052d2632af5db80e5467627681",
  "receipt": {
    "to": null,
    "from": "0xF5c112997fe4Ca52abe1acC9552C64666EF5C8e1",
    "contractAddress": "0x0370E44b6B3b4B22BC5deC4053FCb82aD1591BE5",
    "transactionIndex": 4,
    "gasUsed": "454303",
    "logsBloom": "0x
    "blockHash": "0xa8892242f4e2f6daff4516b7dffbf52536bbcb793ca1f4074efd1143296bb6f6",
    "transactionHash": "0xe95f85efed00c3ce4039926ab0288f6efd79fa052d2632af5db80e5467627681",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 27672913,
        "transactionHash": "0xe95f85efed00c3ce4039926ab0288f6efd79fa052d2632af5db80e5467627681",
        "address": "0x0370E44b6B3b4B22BC5deC4053FCb82aD1591BE5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5c112997fe4ca52abe1acc9552c64666ef5c8e1"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xa8892242f4e2f6daff4516b7dffbf52536bbcb793ca1f4074efd1143296bb6f6"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 27672913,
        "transactionHash": "0xe95f85efed00c3ce4039926ab0288f6efd79fa052d2632af5db80e5467627681",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f5c112997fe4ca52abe1acc9552c64666ef5c8e1",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000351ed045d9b0850000000000000000000000000000000000000000000000009d65ad51fb5885e500000000000000000000000000000000000000000000235150fef9308ae7fc2b0000000000000000000000000000000000000000000000009d308e81b57ed56000000000000000000000000000000000000000000000235151341800d0c1acb0",
        "logIndex": 10,
        "blockHash": "0xa8892242f4e2f6daff4516b7dffbf52536bbcb793ca1f4074efd1143296bb6f6"
      }
    ],
    "blockNumber": 27672913,
    "cumulativeGasUsed": "767302",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b"
  ],
  "numDeployments": 7,
  "solcInputHash": "4b68c2de28f8a2e4170791ba065f2ea4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"}],\"name\":\"AlreadyArchived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"}],\"name\":\"ArchiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"}],\"name\":\"addArchive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"archiveAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DArchive.sol\":\"DArchive\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DArchive.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\n\\ncontract DArchive is ERC2771Recipient, Ownable {\\n    event ArchiveAdded(string contentID);\\n    error AlreadyArchived(string contentID);\\n\\n    mapping(string => bool) public archiveAdded;\\n\\n    constructor(address _trustedForwarder) {\\n        _setTrustedForwarder(_trustedForwarder);\\n    }\\n\\n    function addArchive(string calldata contentID) public {\\n        if (archiveAdded[contentID]) {\\n            revert AlreadyArchived(contentID);\\n        }\\n        archiveAdded[contentID] = true;\\n        emit ArchiveAdded(contentID);\\n    }\\n\\n    function setTrustedForwarder(address _trustedForwarder) public onlyOwner {\\n        _setTrustedForwarder(_trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(Context, ERC2771Recipient)\\n        returns (address sender)\\n    {\\n        sender = ERC2771Recipient._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(Context, ERC2771Recipient)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Recipient._msgData();\\n    }\\n\\n    function versionRecipient() external pure returns (string memory) {\\n        return \\\"2.2.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x4061a40c2fabce7041a6a6ab35fb239c156b5dfa86d52a1f39f76575d8f0da76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161079338038061079383398101604081905261002f916100ff565b61003f61003a610060565b610079565b600080546001600160a01b0319166001600160a01b0383161790555061012f565b60006100746100cb60201b6103141760201c565b905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000601436108015906100e857506000546001600160a01b031633145b156100fa575060131936013560601c90565b503390565b60006020828403121561011157600080fd5b81516001600160a01b038116811461012857600080fd5b9392505050565b6106558061013e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063cc82cf8711610066578063cc82cf8714610129578063ce1b815f14610157578063da74222814610168578063db6398c61461017b578063f2fde38b1461018e57600080fd5b8063486ff0cd14610098578063572b6c05146100c8578063715018a6146100fa5780638da5cb5b14610104575b600080fd5b60408051808201825260058152640322e322e360dc1b602082015290516100bf9190610422565b60405180910390f35b6100ea6100d6366004610477565b6000546001600160a01b0391821691161490565b60405190151581526020016100bf565b6101026101a1565b005b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100bf565b6100ea6101373660046104bd565b805160208183018101805160028252928201919093012091525460ff1681565b6000546001600160a01b0316610111565b610102610176366004610477565b6101b5565b61010261018936600461056e565b6101de565b61010261019c366004610477565b61029e565b6101a9610348565b6101b360006103c1565b565b6101bd610348565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600282826040516101f09291906105e0565b9081526040519081900360200190205460ff161561022e57818160405163f559f28f60e01b81526004016102259291906105f0565b60405180910390fd5b6001600283836040516102429291906105e0565b908152604051908190036020018120805492151560ff19909316929092179091557f376ebb7b46b0a9d054010a577effbc5f0465a50e29441074c44bfd8b8aaa55309061029290849084906105f0565b60405180910390a15050565b6102a6610348565b6001600160a01b03811661030b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b6101db816103c1565b60006014361080159061033157506000546001600160a01b031633145b15610343575060131936013560601c90565b503390565b610350610413565b6001600160a01b031661036b6001546001600160a01b031690565b6001600160a01b0316146101b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610225565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061041d610314565b905090565b600060208083528351808285015260005b8181101561044f57858101830151858201604001528201610433565b81811115610461576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561048957600080fd5b81356001600160a01b03811681146104a057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156104cf57600080fd5b813567ffffffffffffffff808211156104e757600080fd5b818401915084601f8301126104fb57600080fd5b81358181111561050d5761050d6104a7565b604051601f8201601f19908116603f01168101908382118183101715610535576105356104a7565b8160405282815287602084870101111561054e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806020838503121561058157600080fd5b823567ffffffffffffffff8082111561059957600080fd5b818501915085601f8301126105ad57600080fd5b8135818111156105bc57600080fd5b8660208285010111156105ce57600080fd5b60209290920196919550909350505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220630df6118578f48cd30d2149ca52777d2a4e5b7f5060f94a6d055103cc9756ca64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063cc82cf8711610066578063cc82cf8714610129578063ce1b815f14610157578063da74222814610168578063db6398c61461017b578063f2fde38b1461018e57600080fd5b8063486ff0cd14610098578063572b6c05146100c8578063715018a6146100fa5780638da5cb5b14610104575b600080fd5b60408051808201825260058152640322e322e360dc1b602082015290516100bf9190610422565b60405180910390f35b6100ea6100d6366004610477565b6000546001600160a01b0391821691161490565b60405190151581526020016100bf565b6101026101a1565b005b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100bf565b6100ea6101373660046104bd565b805160208183018101805160028252928201919093012091525460ff1681565b6000546001600160a01b0316610111565b610102610176366004610477565b6101b5565b61010261018936600461056e565b6101de565b61010261019c366004610477565b61029e565b6101a9610348565b6101b360006103c1565b565b6101bd610348565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600282826040516101f09291906105e0565b9081526040519081900360200190205460ff161561022e57818160405163f559f28f60e01b81526004016102259291906105f0565b60405180910390fd5b6001600283836040516102429291906105e0565b908152604051908190036020018120805492151560ff19909316929092179091557f376ebb7b46b0a9d054010a577effbc5f0465a50e29441074c44bfd8b8aaa55309061029290849084906105f0565b60405180910390a15050565b6102a6610348565b6001600160a01b03811661030b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b6101db816103c1565b60006014361080159061033157506000546001600160a01b031633145b15610343575060131936013560601c90565b503390565b610350610413565b6001600160a01b031661036b6001546001600160a01b031690565b6001600160a01b0316146101b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610225565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061041d610314565b905090565b600060208083528351808285015260005b8181101561044f57858101830151858201604001528201610433565b81811115610461576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561048957600080fd5b81356001600160a01b03811681146104a057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156104cf57600080fd5b813567ffffffffffffffff808211156104e757600080fd5b818401915084601f8301126104fb57600080fd5b81358181111561050d5761050d6104a7565b604051601f8201601f19908116603f01168101908382118183101715610535576105356104a7565b8160405282815287602084870101111561054e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806020838503121561058157600080fd5b823567ffffffffffffffff8082111561059957600080fd5b818501915085601f8301126105ad57600080fd5b8135818111156105bc57600080fd5b8660208285010111156105ce57600080fd5b60209290920196919550909350505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220630df6118578f48cd30d2149ca52777d2a4e5b7f5060f94a6d055103cc9756ca64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DArchive.sol:DArchive",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 134,
        "contract": "contracts/DArchive.sol:DArchive",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 281,
        "contract": "contracts/DArchive.sol:DArchive",
        "label": "archiveAdded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}