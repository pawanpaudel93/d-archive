{
  "address": "0x0D9eFE173CA5BF888523AD592774585bDd3e6057",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ArchiveAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "addArchive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "archiveAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalArchives",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x846b1ee68314fcfa50be94e1608128e62699836c8cdc1d82aac35c6b2e9f4f0b",
  "receipt": {
    "to": null,
    "from": "0xF5c112997fe4Ca52abe1acC9552C64666EF5C8e1",
    "contractAddress": "0x0D9eFE173CA5BF888523AD592774585bDd3e6057",
    "transactionIndex": 3,
    "gasUsed": "272841",
    "logsBloom": "0x
    "blockHash": "0x35d653bb553ba3d3f48f0bebbd5b1f19727e84bb235bed42892e92fe53aa4484",
    "transactionHash": "0x846b1ee68314fcfa50be94e1608128e62699836c8cdc1d82aac35c6b2e9f4f0b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27546194,
        "transactionHash": "0x846b1ee68314fcfa50be94e1608128e62699836c8cdc1d82aac35c6b2e9f4f0b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f5c112997fe4ca52abe1acc9552c64666ef5c8e1",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000229b87d86505590000000000000000000000000000000000000000000000005974515ccd718b2e000000000000000000000000000000000000000000002234fa0737a0a3fcd5b30000000000000000000000000000000000000000000000005951b5d4f50c85d5000000000000000000000000000000000000000000002234fa29d3287c61db0c",
        "logIndex": 9,
        "blockHash": "0x35d653bb553ba3d3f48f0bebbd5b1f19727e84bb235bed42892e92fe53aa4484"
      }
    ],
    "blockNumber": 27546194,
    "cumulativeGasUsed": "614269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "edbe3d8cd29deacd7e3b577c9580b9c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ArchiveAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"addArchive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"archiveAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArchives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DArchive.sol\":\"DArchive\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DArchive.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract DArchive {\\n    using Counters for Counters.Counter;\\n\\n    event ArchiveAdded(\\n        uint256 ID,\\n        string contentID,\\n        string contentURI,\\n        string title,\\n        uint256 timestamp\\n    );\\n\\n    Counters.Counter public totalArchives;\\n    mapping(string => bool) public archiveAdded;\\n\\n    constructor() {}\\n\\n    function addArchive(\\n        string calldata contentID,\\n        string calldata contentURI,\\n        string calldata title\\n    ) public {\\n        require(archiveAdded[contentID] == false, \\\"Archive already exists\\\");\\n        totalArchives.increment();\\n        emit ArchiveAdded(\\n            totalArchives.current(),\\n            contentID,\\n            contentURI,\\n            title,\\n            block.timestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2749b3e954b1bbb274e680ad4efc6322a4128aef816c2dab736a08dbf98a4517\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103f9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638397ef2f14610046578063cc82cf871461005b578063fdf360e21461009e575b600080fd5b6100596100543660046101d1565b6100b6565b005b610089610069366004610281565b805160208183018101805160018252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b6000546100a89081565b604051908152602001610095565b600186866040516100c8929190610332565b9081526040519081900360200190205460ff16156101255760405162461bcd60e51b81526020600482015260166024820152754172636869766520616c72656164792065786973747360501b604482015260640160405180910390fd5b610133600080546001019055565b7f35fe42b2a6441544ee9f57b47136d6899bbab09118779ea7f131d1c6698f72f661015d60005490565b8787878787874260405161017898979695949392919061036b565b60405180910390a1505050505050565b60008083601f84011261019a57600080fd5b50813567ffffffffffffffff8111156101b257600080fd5b6020830191508360208285010111156101ca57600080fd5b9250929050565b600080600080600080606087890312156101ea57600080fd5b863567ffffffffffffffff8082111561020257600080fd5b61020e8a838b01610188565b9098509650602089013591508082111561022757600080fd5b6102338a838b01610188565b9096509450604089013591508082111561024c57600080fd5b5061025989828a01610188565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561029357600080fd5b813567ffffffffffffffff808211156102ab57600080fd5b818401915084601f8301126102bf57600080fd5b8135818111156102d1576102d161026b565b604051601f8201601f19908116603f011681019083821181831017156102f9576102f961026b565b8160405282815287602084870101111561031257600080fd5b826020860160208301376000928101602001929092525095945050505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815260a06020820152600061038560a08301898b610342565b828103604084015261039881888a610342565b905082810360608401526103ad818688610342565b915050826080830152999850505050505050505056fea26469706673582212203e8e4b4b8bf3fac192b89823665c55e237032ff199400cc0bcfdb0f6ea93c24d64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80638397ef2f14610046578063cc82cf871461005b578063fdf360e21461009e575b600080fd5b6100596100543660046101d1565b6100b6565b005b610089610069366004610281565b805160208183018101805160018252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b6000546100a89081565b604051908152602001610095565b600186866040516100c8929190610332565b9081526040519081900360200190205460ff16156101255760405162461bcd60e51b81526020600482015260166024820152754172636869766520616c72656164792065786973747360501b604482015260640160405180910390fd5b610133600080546001019055565b7f35fe42b2a6441544ee9f57b47136d6899bbab09118779ea7f131d1c6698f72f661015d60005490565b8787878787874260405161017898979695949392919061036b565b60405180910390a1505050505050565b60008083601f84011261019a57600080fd5b50813567ffffffffffffffff8111156101b257600080fd5b6020830191508360208285010111156101ca57600080fd5b9250929050565b600080600080600080606087890312156101ea57600080fd5b863567ffffffffffffffff8082111561020257600080fd5b61020e8a838b01610188565b9098509650602089013591508082111561022757600080fd5b6102338a838b01610188565b9096509450604089013591508082111561024c57600080fd5b5061025989828a01610188565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561029357600080fd5b813567ffffffffffffffff808211156102ab57600080fd5b818401915084601f8301126102bf57600080fd5b8135818111156102d1576102d161026b565b604051601f8201601f19908116603f011681019083821181831017156102f9576102f961026b565b8160405282815287602084870101111561031257600080fd5b826020860160208301376000928101602001929092525095945050505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b88815260a06020820152600061038560a08301898b610342565b828103604084015261039881888a610342565b905082810360608401526103ad818688610342565b915050826080830152999850505050505050505056fea26469706673582212203e8e4b4b8bf3fac192b89823665c55e237032ff199400cc0bcfdb0f6ea93c24d64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 95,
        "contract": "contracts/DArchive.sol:DArchive",
        "label": "totalArchives",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/DArchive.sol:DArchive",
        "label": "archiveAdded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DArchive.sol:DArchive",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}